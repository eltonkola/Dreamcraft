name: Build and Release Dreamcraft Android App

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1). Do not include "v" prefix.'
        required: true
        default: '1.0.0'
      release_notes:
        description: 'Specific notes for this release (optional). Will be added to a default message.'
        required: false
        default: 'General improvements and bug fixes.'

jobs:
  lint-android:
    name: Lint Android App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
        with:
          root-directory: ./android_app # Specify root directory for wrapper

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: Make gradlew executable
        working-directory: ./android_app # Run in the subfolder
        run: chmod +x ./gradlew

      - name: Run Android Lints
        working-directory: ./android_app # Run in the subfolder
        run: ./gradlew :app:lintDebug # Or :app:lintRelease / :app:lint

  build-android:
    name: Build and Sign Android APK
    runs-on: ubuntu-latest
    needs: [lint-android] # Make lint a prerequisite

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
        with:
          root-directory: ./android_app

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle

      - name: Make gradlew executable
        working-directory: ./android_app
        run: chmod +x ./gradlew

      - name: Build Release APK
        working-directory: ./android_app
        run: ./gradlew :app:assembleRelease

      - name: List unsigned APKs (for debugging)
        working-directory: ./android_app
        run: |
          echo "Listing contents of app/build/outputs/apk/release:"
          ls -R app/build/outputs/apk/release || echo "Directory app/build/outputs/apk/release not found or empty after build."

      - name: Setup build tool version variable
        shell: bash
        run: |
          # Attempt to find build tools, sort version-sensitively if possible
          if command -v sort &> /dev/null && sort --version-sort --help &> /dev/null; then
            LATEST_BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | sort -V | tail -n 1)
          else # Fallback to simple lexical sort if sort -V is not available
            LATEST_BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          fi
          echo "Determined latest build tool version: $LATEST_BUILD_TOOL_VERSION"
          echo "BUILD_TOOL_VERSION_DYNAMIC=$LATEST_BUILD_TOOL_VERSION" >> $GITHUB_ENV

      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android_app/app/build/outputs/apk/release # Adjusted path
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION_DYNAMIC }}

      - name: Verify Signed APK and Prepare Upload Path
        id: verify_signed_apk
        run: |
          # The signing action places the signed APK in the same directory, typically named app-release-signed.apk or similar
          # Let's find the signed APK; it usually has '-signed' in its name.
          # The output 'signedReleaseFile' from r0adkll/sign-android-release@v1 is the correct path.
          signed_apk_path="${{ steps.sign_apk.outputs.signedReleaseFile }}"
          echo "Signed APK path from signing action: $signed_apk_path"

          if [ -f "$signed_apk_path" ]; then
            echo "Signed APK confirmed to exist at: $signed_apk_path"
            # We need to make sure this path is relative to the workspace root for upload-artifact
            # The 'signedReleaseFile' output is usually an absolute path.
            # Convert to relative if needed, or ensure upload-artifact handles it.
            # For upload-artifact, the path should be relative to GITHUB_WORKSPACE
            relative_signed_apk_path="${signed_apk_path#$GITHUB_WORKSPACE/}"
            echo "Relative signed APK path: $relative_signed_apk_path"
            echo "upload_file_path=$relative_signed_apk_path" >> $GITHUB_OUTPUT
            # For debugging, let's also output the original path
            echo "original_signed_apk_path=$signed_apk_path" >> $GITHUB_OUTPUT
          else
            echo "::error::Signed APK not found at '$signed_apk_path' (output from sign_apk step)."
            echo "This can happen if the 'releaseDirectory' or 'BUILD_TOOLS_VERSION' for sign_apk was incorrect or if signing failed silently."
            echo "BUILD_TOOLS_VERSION used was: ${{ env.BUILD_TOOL_VERSION_DYNAMIC }}"
            echo "Listing contents of expected directory: android_app/app/build/outputs/apk/release/"
            ls -R android_app/app/build/outputs/apk/release/ || echo "Directory android_app/app/build/outputs/apk/release/ not found or empty."
            echo "Re-listing available build-tools versions from /usr/local/lib/android/sdk/build-tools/:"
            ls -1 /usr/local/lib/android/sdk/build-tools/ || echo "Could not list build-tools directory."
            exit 1
          fi

      - name: Upload Signed APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dreamcraft-signed-apk # Artifact name for download later
          path: ${{ steps.verify_signed_apk.outputs.upload_file_path }} # Use the relative path

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-android]
    permissions:
      contents: write # To create releases and upload assets
    steps:
      - name: Download Signed APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: dreamcraft-signed-apk # Matches upload name
          path: release-assets/ # Download to this directory

      - name: List Downloaded Files
        run: |
          echo "Listing contents of release-assets/ after download:"
          ls -R release-assets/

      - name: Set up GitHub CLI
        run: |
          type gh > /dev/null 2>&1 || {
            echo "gh CLI not found, installing..."
            sudo apt-get update -y && sudo apt-get install -y gh
          }
          gh --version

      - name: Create GitHub Release and Upload APK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          INPUT_RELEASE_NOTES: ${{ github.event.inputs.release_notes }}
        run: |
          RELEASE_TAG="v${INPUT_VERSION}"
          RELEASE_NAME="Dreamcraft ${RELEASE_TAG}"
          
          # Find the APK file, its name might vary slightly depending on the signing process
          # The r0adkll/sign-android-release usually renames the file it signs, often to app-release-unsigned-signed.apk
          # or simply app-release-signed.apk. Let's find it.
          # The download-artifact step places it directly in release-assets/
          # The name comes from the original file name in releaseDirectory before signing.
          # The r0adkll/sign-android-release action modifies the original file if it's already signed or creates a new one.
          # If the original was app-release.apk, it might become app-release-signed.apk
          # Let's assume the signed APK is the only .apk file in the release-assets directory after download
          
          downloaded_apk_file=$(find release-assets/ -type f -name "*.apk" | head -n 1)

          if [ -z "$downloaded_apk_file" ]; then
            echo "::error::No APK file found in release-assets/ after download."
            ls -R release-assets/
            exit 1
          fi
          
          echo "Found APK: $downloaded_apk_file"
          APK_ASSET_NAME="Dreamcraft-${RELEASE_TAG}.apk" # Desired name for the asset in the release
          
          RELEASE_BODY=$(cat <<EOF
          Release of Dreamcraft Android App version ${INPUT_VERSION}.

          ${INPUT_RELEASE_NOTES}
          EOF
          )

          echo "Creating release for tag: $RELEASE_TAG"
          echo "Release Name: $RELEASE_NAME"
          echo "APK Asset Name: $APK_ASSET_NAME"
          echo "--- Release Body ---"
          echo "$RELEASE_BODY"
          echo "--------------------"
          echo "Uploading APK from: $downloaded_apk_file as $APK_ASSET_NAME"
          
          gh release create "$RELEASE_TAG" \
            --repo "$GITHUB_REPOSITORY" \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_BODY" \
            --draft=false \
            --prerelease=false \
            "$downloaded_apk_file#$APK_ASSET_NAME"
          echo "Release created and APK uploaded."
